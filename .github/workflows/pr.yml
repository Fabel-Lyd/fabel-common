# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: PR

# Controls when the workflow will run
on:
  pull_request:
    branches: [ master ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: read

jobs:
  check_source_changes:
    runs-on: ubuntu-latest
    outputs:
      source_changed: ${{ steps.filter.outputs.source_changed }}

    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            source_changed:
              - '!.github/workflows/*'

  build:
    needs: check_source_changes
    if: ${{ needs.check_source_changes.outputs.source_changed == 'true' }}
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Get package version
      run: echo "PACKAGE_VERSION=$(python version.py)" >> $GITHUB_ENV

    - name: Verify that package is not a release candidate
      run: ${{ !contains(env.PACKAGE_VERSION, 'rc') }}

    - name: Check for existing release
      uses: actions/github-script@v6
      with:
        script: |
          try {
              const response = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: process.env.PACKAGE_VERSION
              });
          
              core.exportVariable('RELEASE_EXISTS', true);
            } catch (error) {
              if (error.message == 'Not Found') {
                core.exportVariable('RELEASE_EXISTS', false);
                return;
              }
              core.setFailed(error.message);
            }

    - name: Verify that release with tag ${{ env.PACKAGE_VERSION }} does not exist
      run: ${{ env.RELEASE_EXISTS == 'false' }}

    - name: Install pipenv
      run: pipx install pipenv==2023.6.18

    - uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        cache: 'pipenv'

    # caching only works with install (not sync)
    - run: pipenv install --dev

    - uses: actions/setup-node@v2

    - name: Lint with flake8
      run: pipenv run flake8

    - name: Check with pyright
      run: pipenv run pyright

    - name: Test with pytest
      run: |
        pipenv run pytest
